@page "/signalr"
@using System.Net
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@implements IAsyncDisposable

@inject IHttpMessageHandlerFactory HttpMessageHandlerFactory
@inject ILoggerFactory LoggerFactory

<PageTitle>Chat</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private Activity? _activity;

    protected override async Task OnInitializedAsync()
    {
        Activity? previousActivity = null;
        if (Activity.Current != null)
        {
            previousActivity = Activity.Current;
            Activity.Current = null;
        }

        _activity = ChatActivity.ActivitySource.StartActivity("ChatPage", System.Diagnostics.ActivityKind.Client);

        var builder = new HubConnectionBuilder()
            .WithUrl("http://localhost:8080/chathub", options =>
            {
                options.Transports = HttpTransportType.WebSockets;
            });
        builder.Services.AddSingleton(LoggerFactory);

        hubConnection = builder.Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        if (Activity.Current != previousActivity)
        {
            Activity.Current = previousActivity;
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            Activity? previousActivity = null;
            if (Activity.Current != _activity)
            {
                previousActivity = Activity.Current;
                Activity.Current = _activity;
            }

            await hubConnection.SendAsync("SendMessage", userInput, messageInput);

            if (previousActivity != null)
            {
                Activity.Current = previousActivity;
            }
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        _activity?.Stop();
    }
}
